#!/usr/bin/env python3

from os.path import exists
import json

from software import SOFTWARE
from software.services import SERVICES
from util import indent

def load_config():
    if not exists('config.json'):
        return [];
    with open('config.json') as f:
        return json.load(f)

def write_config(config):
    with open("config.json", "w") as f:
        json.dump(config, f)

    output = "# This file was generated by Fediverse Playground (GPL3+)\nversion: '3'\n\nservices:"
    services = set()
    volumes = {}
    for inst in config:
        software = SOFTWARE[inst['instance_type']]
        for dependency in software['dependencies']:
            if dependency['type'] not in volumes and 'volumes' in dependency:
                volumes[inst['instance_type']] = dependency['volumes']

            if dependency['type'] not in services:
                services.add(dependency['type'])
                config_file = f"{inst['id']}.conf"
                dependency_container_names = list(map(
                    lambda dep: dep['container_name'].format(id=inst['id']) if 'container_name' in dep else dep['type'],
                    software['dependencies'],
                ))
                dependency_volumes = list(map(
                    lambda v: f"{v.format(config='./files/' + config_file, id=inst['id'])}:{dependency['volumes'][v].format(config=config_file, id=inst['id'])}",
                    dependency['volumes'],
                )) if 'volumes' in dependency else []

                service = dependency['definition'] if 'definition' in dependency else SERVICES[dependency['type']]

                output += indent(service(
                    inst['id'],
                    dependency_container_names,
                    dependency_volumes,
                    software['docker-image'] if 'docker-image' in software else None,
                ).rstrip("\n ") + "\n")

    # TODO
    output += "\n\nvolumes:\n    database:"

    with open('docker-compose.yml', 'w') as f:
        f.write(output)
