#!/usr/bin/env python

from os.path import exists
from whiptail import Whiptail
from re import sub
import json
import sys

SOFTWARE = {
    'social-v3': {
        'display_name': 'GNU social v3',
        'services': ['web', 'db', 'php'],
        'source': ('git@codeberg.org:GNUsocial/gnu-social.git', 'v3'),
    },
    'social-v2': {
        'display_name': 'GNU social v2',
        'services': ['web', 'db', 'php'],
        'source': ('git@codeberg.org:GNUsocial/gnu-social.git', 'nightly'),
    }
}

def format_array(arr):
    return ("\n        - " if len(arr) > 0 else '') + "\n        - ".join(arr)

SERVICES = {
    'web': lambda id, deps, volumes:
    """
web:
    image: nginx:alpine
    depends_on: {deps}
    restart: always
    tty: false
    ports:
        - "80:80"
        - "443:443"
    volumes: {volumes}
        - ./docker/web/nginx.conf:/var/nginx/nginx.conf
    """.format(deps=format_array(deps), volumes=format_array(volumes)),

    'db': lambda id, deps, volumes:
    """
db:
   image: postgres:alpine
   restart: always
   tty: false
   environment:
       - PGDATA=/var/lib/postgres/data
   volumes: {volumes}
       - database:/var/lib/postgres/data
    """.format(id=id, deps=format_array(deps), volumes=format_array(volumes)),

    'php': lambda id, deps, volumes:
    """
php:
    build: docker/php
    restart: always
    tty: true
    container_name: {id}_php
    volumes: {volumes}
        - ./docker/php/entrypoint.sh:/bin/entrypoint.sh
        - ./docker/db/wait_for_db.sh:/bin/wait_for_db.sh
    command: /entrypoint.sh
    """.format(id=id, deps=format_array(deps), volumes=format_array(volumes)),
}

def snake_case(s):
  return '_'.join(
    sub('([A-Z][a-z]+)', r' \1',
    sub('([A-Z]+)', r' \1',
    s.replace('-', ' '))).split()).lower()

def load_config():
    if not exists('config.json'):
        return [];
    with open('config.json') as f:
        return json.load(f)

def write_config(data):
    with open("config.json", "w") as f:
        json.dump(data, f)

w = Whiptail(title="Fediverse Playground", backtitle="Fediverse Playground", height=0, width=0)

config = load_config()

run = True
while run:
    w.title = "Fediverse Playground"

    msg = f"Added {len(config)} config" if len(config) > 0 else 'No config'
    selection, rc = w.menu(msg=msg, items=['Add an Instance', 'Edit Instance', 'Remove an Instance', 'Edit Configuration', 'Save Configuration'])

    if (rc != 0):
        print('Cancelling')
        break

    w.title = selection

    match selection:
        case 'Add an Instance':
            instance_type, rc = w.radiolist(
                msg='Which software would you like to add?',
                items=list(zip(SOFTWARE.keys(), list(map(lambda s: SOFTWARE[s]['display_name'], SOFTWARE)), ['off'] * len(SOFTWARE))),
            )
            instance_type = ' '.join(instance_type)
            if instance_type == '' or rc != 0:
                sys.exit(f"Invalid instance type {instance_type} {rc}")

            hostname, rc = w.inputbox(msg='What hostname should this instance be available under?', default='.localhost')
            if hostname == '' or rc != 0:
                sys.exit('Invalid hostname')

            name, rc = w.inputbox(msg='What should this instance be called?')
            if name == '' or rc != 0:
                sys.exit('Invalid name')

            id, rc = w.inputbox(msg='What name should the Docker containers use?', default=snake_case(name))
            if id == '' or rc != 0:
                sys.exit('Invalid ID')

            config.append({ 'instance_type': instance_type, 'hostname': hostname, 'name': name, 'id': id })

        case 'Save Configuration':
            run = False
            write_config(config)
            print('Exiting...')

    print(config)
