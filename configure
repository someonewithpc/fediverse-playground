#!/usr/bin/env python

from os.path import exists
from whiptail import Whiptail
from re import sub
import json
import sys

def config_social_v3(id):
    return id

def config_social_v2(id):
    return id

SOFTWARE = {
    'social-v3': {
        'display_name': 'GNU social v3',
        'services': [
            { 'type': 'web', 'volumes': { './public': '/var/www/social/public', '{config}': '/var/nginx/{config}' }},
            { 'type': 'db' },
            { 'type': 'php' },
        ],
        'config': config_social_v3,
        'source': ('git@codeberg.org:GNUsocial/gnu-social.git', 'v3'),
    },
    'social-v2': {
        'display_name': 'GNU social v2',
        'services': [
            { 'type': 'web' },
            { 'type': 'db' },
            { 'type': 'php' },
        ],
        'config': config_social_v2,
        'source': ('git@codeberg.org:GNUsocial/gnu-social.git', 'nightly'),
    }
}

def format_array(arr):
    return ("\n        - " if len(arr) > 0 else '') + "\n        - ".join(arr)

SERVICES = {
    'web': lambda id, deps, volumes:
    """
web:
    image: nginx:alpine
    depends_on: {deps}
    restart: always
    tty: false
    ports:
        - "80:80"
        - "443:443"
    volumes: {volumes}
        - ./docker/web/nginx.conf:/var/nginx/nginx.conf
    """.format(deps=format_array(deps), volumes=format_array(volumes)),

    'db': lambda id, deps, volumes:
    """
db:
    image: postgres:alpine
    restart: always
    tty: false
    environment:
        - PGDATA=/var/lib/postgres/data
    volumes: {volumes}
        - database:/var/lib/postgres/data
    """.format(deps=format_array(deps), volumes=format_array(volumes)),

    'php': lambda id, deps, volumes:
    """
{id}:
    build: docker/php
    restart: always
    tty: true
    container_name: {container_name}
    volumes: {volumes}
        - ./docker/php/entrypoint.sh:/bin/entrypoint.sh
        - ./docker/db/wait_for_db.sh:/bin/wait_for_db.sh
    command: /entrypoint.sh
    """.format(id=id, deps=format_array(deps), volumes=format_array(volumes), container_name=f"{id}-php" if id else 'php'),
}

def snake_case(s):
  return '_'.join(
    sub('([A-Z][a-z]+)', r' \1',
    sub('([A-Z]+)', r' \1',
    s.replace('-', ' '))).split()).lower()

def indent(mlstr, level = 1, width = 4):
    return '\n'.join(map(lambda l: (' ' * level * width) + l, mlstr.split("\n")))

def load_config():
    if not exists('config.json'):
        return [];
    with open('config.json') as f:
        return json.load(f)

def write_config(config):
    with open("config.json", "w") as f:
        json.dump(config, f)

    output = "# This file was generated by Fediverse Playground (GPL3+)\nversion: '3'\n\nservices:"
    services = set()
    volumes = {}
    for inst in config:
        software = SOFTWARE[inst['instance_type']]
        for service in software['services']:
            if service['type'] not in volumes and 'volumes' in service:
                volumes[inst['instance_type']] = service['volumes']

            if service['type'] not in services:
                services.add(service['type'])
                config_file = f"{inst['id']}.conf"
                output += indent(SERVICES[service['type']](
                    inst['id'],
                    list(map(
                        lambda serv: serv['type'],
                        software['services'],
                    )),
                    list(map(
                        lambda v: f"{v.format(config='./files/' + config_file)}:{service['volumes'][v].format(config=config_file)}",
                        service['volumes'],
                    )) if 'volumes' in service else [],
                ).rstrip("\n ") + "\n")

    # TODO
    output += "\n\nvolumes:\n    database:"

    with open('docker-compose.yml', 'w') as f:
        f.write(output)


w = Whiptail(title="Fediverse Playground", backtitle="Fediverse Playground", height=0, width=0)

config = load_config()

run = True
while run:
    w.title = "Fediverse Playground"

    msg = f"Added {len(config)} config" if len(config) > 0 else 'No config'
    selection, rc = w.menu(msg=msg, items=['Add an Instance', 'Edit an Instance', 'Remove an Instance', 'Edit Configuration', 'Save Configuration'])

    if (rc != 0):
        print('Cancelling')
        break

    w.title = selection

    def add_or_edit(kind):
        def inner():
            first_prompt = []
            rc = 0
            if kind == 'add':
                first_prompt, rc = w.menu(
                    msg='Which software would you like to add?',
                    items=list(zip(SOFTWARE.keys(), [SOFTWARE[soft]['display_name'] for soft in SOFTWARE])),
                )
            else:
                id, rc = w.menu(
                    msg='Which instance would you like to edit?',
                    items=list(zip([inst['id'] for inst in config], [f"{inst['instance_type']} - {inst['name']}" for inst in config]))
                )
                first_prompt = [idx for idx, inst in enumerate(config) if inst['id'] == id][0]

            if first_prompt == '' or rc != 0:
                sys.exit(f"Invalid instance type")

            hostname, rc = w.inputbox(
                msg='What hostname should this instance be available under?',
                default='.localhost' if kind == 'add' else config[first_prompt]['hostname']
            )
            if hostname == '' or rc != 0:
                sys.exit('Invalid hostname')

            name, rc = w.inputbox(
                msg='What should this instance be called?',
                default='' if kind == 'add' else config[first_prompt]['name'],
            )
            if name == '' or rc != 0:
                sys.exit('Invalid name')

            id, rc = w.inputbox(
                msg='What name should the Docker containers use?',
                default=snake_case(name) if kind == 'add' else config[first_prompt]['id'],
            )
            if id == '' or rc != 0:
                sys.exit('Invalid ID')

            instance_type = first_prompt if kind == 'add' else config[first_prompt]['instance_type']

            if kind == 'edit':
                config.pop(first_prompt)

            config.append({'instance_type': instance_type, 'hostname': hostname, 'name': name, 'id': id})

        return inner

    def save():
        global run
        run = False
        write_config(config)
        print('Exiting...')

    {
        'Add an Instance': add_or_edit('add'),
        'Edit an Instance': add_or_edit('edit'),
        'Save Configuration': save,
    }[selection]()
